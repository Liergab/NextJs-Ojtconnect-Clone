generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum UserRole {
  ADMIN
  STUDENT
  COMPANY
  
}

enum LinkType {
  FACEBOOK
  LINKEDIN
  PORTFOLIO
}

model User {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?    @unique
  emailVerified     DateTime?
  emailVerifiedDate DateTime? 
  image             String?
  password          String?
  address           String?
  role              UserRole   @default(STUDENT) // Default role is USER
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  profile           UserProfile? // Link to user profile
  CompanyProfile    CompanyProfile? // Link to organization for farmers
  Account           Account[]
  @@map("users")
}
model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId              String   @unique @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?
  user  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 



// Model for normal user profile
model UserProfile {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  university   String?
  course       String?
  Skills       String[]
  links        LinkType 
  certificates String[] 
  organization String[]
  dateOfBirth  DateTime?
  address      String?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("student_profile")
}

// Model for organization (e.g., for farmers)
model CompanyProfile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  organizationName String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("company_profile")
}  

model verificationToken {
    id    String   @id @default(auto()) @map("_id") @db.ObjectId
    email String
    token String @unique
    expires DateTime

    @@unique([email, token])
}

model passwordResetToken {
    id    String   @id @default(auto()) @map("_id") @db.ObjectId
    email String
    token String @unique
    expires DateTime

    @@unique([email, token])
}